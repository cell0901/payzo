// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// NOTEEEEEEEEEEEEEE
// in client generator pls remvoe the output to always generate to node modules and import from there

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String? 
  number String @unique
  password String
  balance Balance[]
  OnRampTransactions  OnRampTransactions[]
  sentTransfers P2Ptransfer[] @relation(name: "FromUserRelation")
  receivedTransfers P2Ptransfer[] @relation(name: "ToUserRelation")
}
model P2Ptransfer {
  id Int @id @default(autoincrement())
  amount Int 
  timeStamp DateTime
  fromUserId Int // `fromUserId` and `toUserId` will be stored in db
  fromUser User @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId Int
  toUser User @relation(name: "ToUserRelation" , fields: [toUserId], references: [id]) // related to User table id with toUserId
}


model OnRampTransactions{
  // this will store all txn user does like sent deposit withdraw etc. will be stored here 
  id Int @id @default(autoincrement())
  status OnRampStatus 
  token String @unique
  provider String 
  amount Int 
  startTime DateTime
  userId Int
  user User @relation(fields: [userId], references: [id])

}
model Balance {
  id Int @id @default(autoincrement())
  userId Int @unique
  amount Int
     locked Int  

  user User @relation(fields: [userId], references: [id])
}

model Merchant {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  auth_type AuthType

}

enum AuthType {
  Google
  Github
}
enum OnRampStatus {
  Success
  Failed
  Processing
}